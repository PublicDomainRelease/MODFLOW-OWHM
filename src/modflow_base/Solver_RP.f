      SUBROUTINE GWF2NWT1RP(INNWT,KPER,Mxiter,IGRID)
!     NEW READ AND PREPARE ROUTINE DEVELOPED BY SCOTT E BOYCE 8/8/2013
      USE GLOBAL,     ONLY:IOUT
      USE GWFNWTMODULE
      IMPLICIT NONE
!     ------------------------------------------------------------------
!     SPECIFICATIONS:
!     ------------------------------------------------------------------
      EXTERNAL SGWF2NWT1PSV
!     ------------------------------------------------------------------
!     ARGUMENTS
!     ------------------------------------------------------------------
      INTEGER::INNWT, KPER, Igrid, Mxiter
!     ------------------------------------------------------------------
!     LOCAL VARIABLES
!     ------------------------------------------------------------------
      CHARACTER(LEN=500)::LINE
      INTEGER::LLOC, LLOCSAVE, ISTART, ISTOP, I,IOS, EOL
      INTEGER::MXITERDUM,LINMETHDUM,IPRNWTDUM,IBOTAVDUM
      REAL::R, TOLDUM, FTOLDUM, THETADUM, AMOMENTDUM,THICKDUM
      REAL::AKAPPADUM, GAMMADUM, BREDUCDUM, BTOLDUM
      LOGICAL,SAVE:: NORPINPUT
!     ------------------------------------------------------------------      
      IF (KPER.EQ.1) THEN                                               !IF KPER=1 THEN NWT INFORMATION HAS ALREADY BEEN READ IN DURING AR SUBROUTINE
        NORPINPUT=.FALSE.
        RETURN
      END IF
      !
      IF(NORPINPUT) RETURN 
      !
      WRITE(IOUT,'(/,A,/)')
     +          'READING NWT SOLVER STRESS PERIOD INFORMATION'
      EOL = LEN(LINE)
      LINE=''
      READ(INNWT,'(A)',IOSTAT=IOS) LINE
      IF(LINE.EQ.'') IOS=1
      IF (IOS.NE.0) THEN                                                !DO NOTHING IF FAILED TO READ IN LINE
        NORPINPUT=.TRUE.
          WRITE(IOUT,'(/,A)') REPEAT('#',120)
          WRITE(IOUT,100)"NWT INPUT FILE STRESS PERIOD ",
     +   "CONVERGENCE INFORMATION FAILED READ FOR STRESS PERIOD",
     +   KPER," REUSING PREVIOUSLY DEFINED CRITERIA FOR REMAINDER OF",
     +   " SIMULATION."
          WRITE(IOUT,'(A)')REPEAT('#',120)
100      FORMAT(2A,I6,/,2A)
        RETURN
      END IF
      !
      i = 1
      r = 1.
      LLOC=1
      !
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,1,I,R,IOUT,INNWT)
      IF (LINE(ISTART:ISTOP).EQ.'-1')THEN                               !REUSE PREVIOUS STRESS PERIODS INPUT
        WRITE(IOUT,101)"REUSING PREVIOUSLY DEFINED",
     +    " NWT INPUT CONVERGENCE INFORMATION FOR STRESS PERIOD: ", KPER
101      FORMAT(/,2A,I6)
        RETURN
      END IF
      !
C------SET POINTERS FOR THE CURRENT GRID.
      CALL SGWF2NWT1PNT(Igrid)
      CALL SGWF2UPW1PNT(Igrid)  !seb lgr
      !
      LLOC=1
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 3, I, TOLDUM, 0, INNWT)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 3, I, FTOLDUM,0, INNWT)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 2, MXITERDUM,R,0,INNWT)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 3, I, THICKDUM,0,INNWT)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 2,LINMETHDUM,R,0,INNWT)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 2, IPRNWTDUM,R,0,INNWT)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 2, IBOTAVDUM,R,0,INNWT)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      
      IF(NORPINPUT)THEN
         WRITE(IOUT,'(/,A)')REPEAT('#',120)
         WRITE(IOUT,102)"NWT INPUT FILE STRESS PERIOD ",
     +   "CONVERGENCE INFORMATION FAILED READ FOR STRESS PERIOD",
     +   KPER," REUSING PREVIOUSLY DEFINED CRITERIA FOR REMAINDER OF",
     +   " SIMULATION."
         WRITE(IOUT,'(A)')REPEAT('#',120)
102      FORMAT(2A,I6,2A)
        RETURN
      END IF
      
      IF(LINMETHDUM.NE.LINMETH)THEN
        WRITE(IOUT,*)'NWT SOLVER RP DOES NOT ALLOW CHANGING OF SOLVER'
        WRITE(IOUT,*)'CHANGING LINMETH FROM ',LINMETHDUM,' TO ',LINMETH
      WRITE(IOUT,*)'IF YOU ARE USING "SPECIFY" THIS WILL CAUSE PROBLEMS'
       LINMETHDUM=LINMETH
      ENDIF
      !
      WRITE(IOUT,'(/,2A,I6,A)')"************",
     +   "NWT INPUT FILE CONVERGENCE INFORMATION FOR STRESS PERIOD",
     +   KPER,"************"
C      
C3B-----GET OPTIONS.
      IFDPARAM=0
      DO
        LLOCSAVE = LLOC
        CALL URWORD(LINE,LLOC,ISTART,ISTOP,1,I,R,IOUT,INNWT)
        SELECT CASE(LINE(ISTART:ISTOP))
        CASE('SIMPLE')
           IFDPARAM=1
           WRITE(IOUT,21)
   21    FORMAT(1X,'SIMPLE OPTION:',/,
     1     1X,'DEFAULT SOLVER INPUT VALUES REFLECT NEARLY LINEAR MODEL')
        CASE('MODERATE')
           IFDPARAM=2
           WRITE(IOUT,23)
   23    FORMAT(1X,'MODERATE OPTION:',/,1X,'DEFAULT SOLVER',
     1         ' INPUT VALUES REFLECT MODERETELY NONLINEAR MODEL')
        CASE('COMPLEX')
         IFDPARAM=3
           WRITE(IOUT,25)
   25    FORMAT(1X,'COMPLEX OPTION:',/,1X,'DEFAULT SOLVER',
     1 ' INPUT VALUES REFLECT STRONGLY NONLINEAR MODEL')
        CASE('SPECIFIED')
         IFDPARAM=4
           WRITE(IOUT,26)
   26    FORMAT(1X,'SPECIFIED OPTION:',/,1X,'SOLVER INPUT',
     1 ' VALUES ARE SPECIFIED BY USER')
        CASE('CONTINUE')
        ICNVGFLG = 1
        CASE('ALLOW_THIN_CELL')
                    CONTINUE
        CASE DEFAULT
                    LLOC = LLOCSAVE
                    EXIT
        END SELECT
      END DO
!   20 CALL URWORD(LINE,LLOC,ISTART,ISTOP,1,I,R,IOUT,INNWT)
!      IF(LINE(ISTART:ISTOP).EQ.'SIMPLE') THEN
!         IFDPARAM=1
!           WRITE(IOUT,21)
!   21    FORMAT(1X,'SIMPLE OPTION:',/,
!     1     1X,'DEFAULT SOLVER INPUT VALUES REFLECT NEARLY LINEAR MODEL')
!      ELSE IF(LINE(ISTART:ISTOP).EQ.'MODERATE') THEN
!         IFDPARAM=2
!           WRITE(IOUT,23)
!   23    FORMAT(1X,'MODERATE OPTION:',/,1X,'DEFAULT SOLVER',
!     1         ' INPUT VALUES REFLECT MODERETELY NONLINEAR MODEL')
!      ELSE IF(LINE(ISTART:ISTOP).EQ.'COMPLEX') THEN
!         IFDPARAM=3
!           WRITE(IOUT,25)
!   25    FORMAT(1X,'COMPLEX OPTION:',/,1X,'DEFAULT SOLVER',
!     1 ' INPUT VALUES REFLECT STRONGLY NONLINEAR MODEL')
!      ELSE IF(LINE(ISTART:ISTOP).EQ.'SPECIFIED') THEN
!         IFDPARAM=4
!           WRITE(IOUT,26)
!   26    FORMAT(1X,'SPECIFIED OPTION:',/,1X,'SOLVER INPUT',
!     1 ' VALUES ARE SPECIFIED BY USER')
!      END IF
!      LLOCSAVE = LLOC
!      CALL URWORD(LINE,LLOC,ISTART,ISTOP,1,I,R,IOUT,INNWT)
!      IF(LINE(ISTART:ISTOP).EQ.'CONTINUE') THEN
!        ICNVGFLG = 1
!      ELSE
!        LLOC = LLOCSAVE
!      END IF
        
      
!      IF(LLOC.LT.200) GO TO 20    
!
! Don't need to read these when using default Options.
      IF ( IFDPARAM.EQ.4 ) THEN
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 3, I,THETADUM,IOUT,INNWT)
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 3, I,AKAPPADUM,IOUT,INNWT)
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 3, I,GAMMADUM,IOUT,INNWT)
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 3, I,AMOMENTDUM,IOUT,INNWT)
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 2, BTRACK, R,IOUT,INNWT)
      IF ( BTRACK.GT.0 ) THEN
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 2, NUMTRACK, R, IOUT,INNWT)
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 3, I, BTOLDUM,  IOUT,INNWT)
      CALL URWORD(LINE, LLOC, ISTART, ISTOP, 3, I, BREDUCDUM,IOUT,INNWT)
      END IF
      ELSEIF ( IFDPARAM.EQ.1 ) THEN
! Set values based on default and Option keyword.
        thetadum = 0.97
        akappadum = 0.0001
        gammadum = 0.0
        amomentdum = 0.0
        Btrack = 0
        Numtrack = 20
        Btoldum = 1.5
        Breducdum = 0.97
      ELSEIF ( IFDPARAM.EQ.2 ) THEN
        thetadum = 0.90
        akappadum = 0.00001   !3/25/16
        gammadum = 0.00
        amomentdum = 0.1
        Btrack = 0
        Numtrack = 20
        Btoldum = 1.1
        Breducdum = 0.9
      ELSEIF ( IFDPARAM.EQ.3 ) THEN
        thetadum = 0.85
        akappadum = 0.00001
        gammadum = 0.0
        amomentdum = 0.1
        Btrack = 1
        Numtrack = 50
        Btoldum = 1.1
        Breducdum = 0.7
      ELSE
        WRITE(IOUT,*)
        WRITE(IOUT,*)'***Erroneous value for Input value "Options."***'
        WRITE(IOUT,*)'Check input. Model Stopping.'
        WRITE(IOUT,*) 
        CALL USTOP(' ')
      END IF
!
      MXITER=MXITERDUM
      THICKFACT=THICKDUM
      LINMETH=LINMETHDUM
      IPRNWT=IPRNWTDUM
      IBOTAV=IBOTAVDUM
      !
      BTOL = BTOLDUM
      BREDUC = BREDUCDUM
      THETA = THETADUM
      AKAPPA = AKAPPADUM
      GAMMA = GAMMADUM
      AMOMENTUM = AMOMENTDUM
      IF ( THETA.LT.CLOSEZERO ) THETA = 0.9D0
      TOL = TOLDUM
      FTOL = FTOLDUM
!2--ECHO NWT INPUT
        WRITE(IOUT,9010) Tol,Ftol,MXITER
        WRITE(IOUT,9011) THETA,AKAPPA,GAMMADUM,AMOMENTUM 
 9010 FORMAT(1X,'  CONVERGENCE CRITERION OF',E15.6,' FOR HEAD SOLUTION',
     +      /1X,'  AND A TOLERANCE OF',E15.6,' FOR FLOW SOLUTION AND ',
     +      /1X,'  A MAXIMUM OF ',I5,' OUTER ITERATIONS. ',//)
 9011 FORMAT(1X,'  D-B-D REDUCTION FACTOR OF ',E15.6,' AND ',
     +      /1X,'  A D-B-D INCREASE FACTOR OF ',E15.6,' AND ',
     +      /1X,'  A D-B-D RELAXATION OF ',E15.6,' AND ', 
     +      /1X,'  A MOMENTUM FACTOR OF ',E15.6,' .',//)
      IF ( BTRACK.GT.0 ) THEN 
          WRITE(IOUT,9012) Numtrack,BTOL,BREDUC
      ELSE
          WRITE(IOUT,*)'***BACKTRACKING IS INACTIVE***'
      END IF
 9012 FORMAT(1X,'  BACKTRACKING IS ACTIVE ',
     +      /1X,'  THE MAXIMUM NUMBER OF BACKTRACKS IS ',I5,' AND ',
     +      /1X,'  THE BACKTRACKING TOLERANCE IS ',E15.6, ' AND',
     +      /1X,'  THE BACKTRACKING REDUCTION FACTOR IS ',E15.6,/)
!-------SAVE POINTERS FOR GRID AND RETURN
      CALL SGWF2NWT1PSV(Igrid)
!
      END SUBROUTINE GWF2NWT1RP
C
      SUBROUTINE PCG7RP(INPCG,KPER,MXITER,IGRID)
C     ******************************************************************
C     ALLOCATE STORAGE FOR PCG ARRAYS AND READ PCG DATA
C     ******************************************************************
C
C        SPECIFICATIONS:
C     ------------------------------------------------------------------
      USE GLOBAL,   ONLY:IOUT
      USE PCGMODULE,ONLY:ITER1,NPCOND,NBPOL,IPRPCG,MUTPCG,NITER,
     1                   HCLOSEPCG,RCLOSEPCG,RELAXPCG,DAMPPCG,
     2                   LHCH,HCHG,LRCHPCG,RCHG,IT1,DAMPPCGT,IHCOFADD
C
      IMPLICIT NONE
      CHARACTER(200):: LINE
      INTEGER::INPCG,MXITER,KPER,IGRID
C     ------------------------------------------------------------------
      INTEGER:: MXITERDUM,ITER1DUM,NPCONDDUM,IHCOFADDDUM
      REAL   :: HCLOSEPCGDUM, RCLOSEPCGDUM, RELAXPCGDUM
      REAL   :: DAMPPCGDUM, DAMPPCGTDUM
      INTEGER:: NBPOLDUM, IPRPCGDUM, MUTPCGDUM
      !
      INTEGER::I,IOS,ISTART,ISTOP,LLOC,ITMEM,ITMEM_BAK,EOL
      REAL::R
      LOGICAL,SAVE:: NORPINPUT
      LOGICAL:: READ_IHCOFADD
      !      
!     ------------------------------------------------------------------
      IF (KPER.EQ.1) THEN                                               !IF KPER=1 THEN PCG INFORMATION HAS ALREADY BEEN READ IN DURING AR SUBROUTINE
        NORPINPUT=.FALSE.
        RETURN
      END IF
      !
      IF(NORPINPUT) RETURN 
      !
      WRITE(IOUT,'(/,A,/)')
     +          'READING PCG SOLVER STRESS PERIOD INFORMATION'
      !
      EOL=LEN(LINE)
      LINE=''
      READ(INPCG,'(A)',IOSTAT=IOS) LINE
      IF(LINE.EQ.'') IOS=1
      IF (IOS.NE.0) THEN                                                !DO NOTHING IF FAILED TO READ IN LINE
        NORPINPUT=.TRUE.
         WRITE(IOUT,'(/,A)')REPEAT('#',120)
         WRITE(IOUT,200)"PCG INPUT FILE STRESS PERIOD ",
     +   "CONVERGENCE INFORMATION FAILED READ FOR STRESS PERIOD",
     +   KPER," REUSING PREVIOUSLY DEFINED CRITERIA FOR REMAINDER OF",
     +   " SIMULATION."
         WRITE(IOUT,'(A)') REPEAT('#',120)
200      FORMAT(2A,I6,/,2A)
        RETURN
      END IF
      !
      i = 1
      r = 1.
      LLOC=1
      !
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,1,I,R,IOUT,INPCG)
      IF (LINE(ISTART:ISTOP).EQ.'-1')THEN                               !REUSE PREVIOUS STRESS PERIODS INPUT
        WRITE(IOUT,202)"REUSING PREVIOUSLY DEFINED ",
     +     "PCG INPUT CONVERGENCE INFORMATION FOR STRESS PERIOD: ", KPER
202      FORMAT(2A,I6)
        RETURN
      END IF
C------SET POINTERS FOR THE CURRENT GRID.
      CALL PCG7PNT(Igrid)
C
C-------READ AND PRINT COMMENTS, MXITER,ITER1 AND NPCOND
      LLOC=1
      ITMEM_BAK=MXITER*ITER1
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,2,MXITERDUM,R,0,INPCG)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,2,ITER1DUM,R,0,INPCG)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,2,NPCONDDUM,R,0,INPCG)
        IF (LINE(EOL:EOL).EQ.'E') NPCONDDUM=NPCOND
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,2,IHCOFADDDUM,R,0,INPCG)
        READ_IHCOFADD = LINE(EOL:EOL).NE.'E'
      
      IF(NORPINPUT)THEN
         WRITE(IOUT,'(A)')REPEAT('#',120)
         WRITE(IOUT,201)"PCG INPUT FILE STRESS PERIOD ",
     +   "CONVERGENCE INFORMATION FAILED READ FOR STRESS PERIOD",
     +   KPER," REUSING PREVIOUSLY DEFINED CRITERIA FOR REMAINDER OF",
     +   " SIMULATION."
         WRITE(IOUT,'(A)')REPEAT('#',120)
201      FORMAT(2A,I6,2A)
        RETURN
      END IF
      !
      IF(NPCOND.NE.NPCONDDUM)THEN
        WRITE(IOUT,*)'PCG SOLVER RP DOES NOT ALLOW CHANGING OF NPCOND'
        WRITE(IOUT,*)'CHANGING NPCOND FROM ', NPCONDDUM,' TO ', NPCOND
       NPCONDDUM=NPCOND
      ENDIF
      !
      MXITER=MXITERDUM
      ITER1=ITER1DUM
      NPCOND=NPCONDDUM
      IF (READ_IHCOFADD)  IHCOFADD=IHCOFADDDUM
!2--ECHO PCG INPUT
          WRITE(IOUT,'(2A,I6,A)')"************",
     +   "PCG INPUT FILE CONVERGENCE INFORMATION FOR STRESS PERIOD",
     +   KPER,"************"
      !
        WRITE (IOUT,509) MXITER, ITER1, NPCOND
  509 FORMAT (' MAXIMUM OF ',I6,' CALLS OF SOLUTION ROUTINE',/,
     &        ' MAXIMUM OF ',I6,
     &        ' INTERNAL ITERATIONS PER CALL TO SOLUTION ROUTINE',/,
     &        ' MATRIX PRECONDITIONING TYPE :',I5)
      IF(IHCOFADD.NE.0) WRITE(IOUT,510)
  510 FORMAT(' IHCOFADD option -- When an active cell is surrounded ',
     & 'by dry cells, convert',/,
     & ' the cell to dry only if storage and head-dependent boundary ',
     & 'flow are 0.')
C
      ITMEM=MXITER*ITER1
      IF(ITMEM.NE.ITMEM_BAK)THEN
        DEALLOCATE(HCHG,LHCH,RCHG,LRCHPCG,IT1)
        !
        ALLOCATE (HCHG(ITMEM))
        ALLOCATE (LHCH(3,ITMEM))
        ALLOCATE (RCHG(ITMEM))
        ALLOCATE (LRCHPCG(3,ITMEM))
        ALLOCATE (IT1(ITMEM))
      END IF
C
C-------READ HCLOSEPCG,RCLOSEPCG,RELAXPCG,NBPOL,IPRPCG,MUTPCG
Crgn changed read to check for different value for transient dampening
      LINE=''
      READ(INPCG,'(A)',IOSTAT=IOS) LINE
      IF(LINE.EQ.'') IOS=1
      IF (IOS.NE.0) THEN                                                !DO NOTHING IF FAILED TO READ IN LINE
        NORPINPUT=.TRUE.
         WRITE(IOUT,'(/,A)')REPEAT('#',120)
         WRITE(IOUT,200)"PCG INPUT FILE STRESS PERIOD ",
     +   "CONVERGENCE INFORMATION FAILED READ FOR STRESS PERIOD",
     +   KPER," REUSING PREVIOUSLY DEFINED CRITERIA FOR REMAINDER OF",
     +   " SIMULATION."
         WRITE(IOUT,'(A)') REPEAT('#',120)
        RETURN
      END IF
      !
      LLOC=1
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,3,I,HCLOSEPCGDUM,0,INPCG)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,3,I,RCLOSEPCGDUM,0,INPCG)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,3,I,RELAXPCGDUM,0,INPCG)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,2,NBPOLDUM,R,0,INPCG)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,2,IPRPCGDUM,R,0,INPCG)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,2,MUTPCGDUM,R,0,INPCG)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,3,I,DAMPPCGDUM,0,INPCG)
        IF (LINE(EOL:EOL).EQ.'E') NORPINPUT=.TRUE.
      
      IF(NORPINPUT)THEN
         WRITE(IOUT,'(A)')REPEAT('#',120)
         WRITE(IOUT,201)"PCG INPUT FILE STRESS PERIOD ",
     +   "CONVERGENCE INFORMATION FAILED READ FOR STRESS PERIOD",
     +   KPER," REUSING PREVIOUSLY DEFINED CRITERIA FOR REMAINDER OF",
     +   " SIMULATION."
         WRITE(IOUT,'(A)')REPEAT('#',120)
        RETURN
      RETURN
      END IF
      
      HCLOSEPCG = HCLOSEPCGDUM
      RCLOSEPCG = RCLOSEPCGDUM
      RELAXPCG  = RELAXPCGDUM
      NBPOL     = NBPOLDUM
      IPRPCG    = IPRPCGDUM
      MUTPCG    = MUTPCGDUM
      DAMPPCG   = DAMPPCGDUM
      !
      IF ( DAMPPCG.LT.0.0 ) THEN
        CALL URWORD(LINE,LLOC,ISTART,ISTOP,3,I,DAMPPCGTDUM,0,INPCG)
        IF (LINE(EOL:EOL).NE.'E') THEN
            DAMPPCGT=DAMPPCGTDUM
            IF (DAMPPCGT.EQ.0.0) DAMPPCGT = 1.0
        END IF
        DAMPPCG = -DAMPPCG
      ELSE
        IF (DAMPPCG.EQ.0.0) DAMPPCG = 1.0
        DAMPPCGT = DAMPPCG
      END IF                                      
C
C-------PRINT MXITER,ITER1,NPCOND,HCLOSEPCG,RCLOSEPCG,RELAXPCG,NBPOL,IPRPCG,
C-------MUTPCG,DAMPPCG
          WRITE (IOUT,511)
  511   FORMAT (1X,///,36X,'SOLUTION BY THE CONJUGATE-GRADIENT METHOD',
     &        /,35X,43('-'))
        WRITE (IOUT,512) MXITER
  512 FORMAT (1X,19X,'MAXIMUM NUMBER OF CALLS TO PCG ROUTINE =',I9)
        WRITE (IOUT,515) ITER1
  515 FORMAT (1X,23X,'MAXIMUM ITERATIONS PER CALL TO PCG =',I9)
        WRITE (IOUT,520) NPCOND
  520 FORMAT (1X,30X,'MATRIX PRECONDITIONING TYPE =',I9)
        IF (NPCOND.EQ.2) WRITE (IOUT,525)
  525 FORMAT (1X,53X,'THE MATRIX WILL BE SCALED')
        WRITE (IOUT,530) RELAXPCG, NBPOL
  530 FORMAT (1X,7X,'RELAXATION FACTOR (ONLY USED WITH',
     &        ' PRECOND. TYPE 1) =',E15.5,/,1X,
     &        'PARAMETER OF POLYNOMIAL PRECOND.',
     &        ' = 2 (2) OR IS CALCULATED :',I9)
        WRITE (IOUT,535) HCLOSEPCG
  535 FORMAT (1X,24X,'HEAD CHANGE CRITERION FOR CLOSURE =',E15.5)
        WRITE (IOUT,540) RCLOSEPCG
  540 FORMAT (1X,20X,'RESIDUAL CHANGE CRITERION FOR CLOSURE =',E15.5)
      IF (IPRPCG.LE.0) IPRPCG = 999
        WRITE (IOUT,545) IPRPCG, MUTPCG
  545 FORMAT (1X,11X,'PCG HEAD AND RESIDUAL CHANGE PRINTOUT INTERVAL =',
     &        I9,/,1X,4X,
     &        'PRINTING FROM SOLVER IS LIMITED(1) OR SUPPRESSED (>1) =',
     &        I9)
        WRITE (IOUT,550) DAMPPCG,DAMPPCGT
  550 FORMAT (1X,27X,'STEADY-STATE DAMPING PARAMETER =',E15.5
     &       /1X,30X,'TRANSIENT DAMPING PARAMETER =',E15.5)
      NITER = 0
C
      CALL PCG7PSV(IGRID)
      RETURN
      END SUBROUTINE PCG7RP