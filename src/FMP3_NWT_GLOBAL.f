C     ******************************************************************
C     FARM PROCESS VERSION 3.0 (FMP3) FOR MODFLOW-2005 VERSION 1.9_01
C     rth -- updated 02/30/2013
C     ******************************************************************
C
C     SUBROUTINE ARGUMENTS LINKED TO MAIN:
C     ------------------------------------------------------------------
C-----CONSTANTS
C       integer constants:
C        MAIN:         IN,IUNITSFR,IUNITMNW1,IUNITUZF,IGRID,IUNITPCG,
C                      IUNITSIP,IUNITDE4,IUNITGMG,KPER,KSTP,KITER
C
C     PARAMETERS USED BY FARM PROCESS BUT DECLARED IN MODULES EXTERNAL TO FMP:
C     ------------------------------------------------------------------------
C-----CONSTANTS
C       integer constants:
C        GLOBAL:       NCOL,NROW,NLAY,NPER,IOUT,LENUNI,ITMUNI
C        GWFBASMODULE: IBDOPT,MSUM,ICBCFL,IAUXSV
C        GWFSFRMODULE: NSTRM,NSEGDIM
C        GWFMNW1MODULE: NWELL2,IWL2CB
C       real constants:
C        GWFBASMODULE: TOTIM,DELT,PERTIM
C        SIPMODULE:    HCLOSE
C        PCGMODULE:    HCLOSEPCG,RCLOSEPCG
C        GMGMODULE:    HCLOSEGMG,RCLOSEGMG
C        DE4MODULE:    HCLOSEDE4        
C
C-----ONE-DIMENSIONAL VARIABLES
C       character one dimension (:):
C        GWFBASMODULE: VBNM
C        PARAMMODULE:  PARNAM,PARTYPE,INAME
C       integer one dimension(:):
C        PARAMMODULE:  IACTIVE
C       real one dimension(:):
C        GWFSFRMODULE: DVRSFLW,SGOTFLW
C        GLOBAL:       PERLEN,DELR,DELC
C        PARAMMODULE:  B
C
C-----TWO-DIMENSIONAL VARIABLES
C       integer two dimensions(:,:):
C        PARAMMODULE:  IPLOC
C        GWFSFRMODULE: ISTRM,IDIVAR
C        GWFUZFMODULE: IUZFBND,IRUNBND
C       real two dimensions(:,:):
C        GWFBASMODULE: VBVL
C        GWFSFRMODULE: STRM,SEG
C        GWFUZFMODULE: FINF,EXCESPP,VKS,SEEPOUT,REJ_INF,VKS
C       double precision two dimensions(:,:):
C        GWRMNWMODULE: WELL2
C
C-------THREE-DIMENSIONAL VARIABLES
C       integer three dimensions(:,:,:):
C        GLOBAL:       IBOUND
C       real two dimensions(:,:,:):
C        GLOBAL:       RHS,HCOF,BUFF
C       double two dimensions(:,:,:):
C        GLOBAL:       HNEW
C
      MODULE FMPMODULE
      IMPLICIT NONE
C-----VERSION 2 09/18/2009 FMPMODULE
C     ******************************************************************
C     DECLARE SHARED SCALARS AND ARRAYS AS POINTERS;
C     (SPECIFIC ARRAY DIMENSIONS DECLARED IN ALLOCATE & READ PROCEDURE)
C     ******************************************************************
C
C-------CONSTANTS
        INTEGER,SAVE,POINTER::
     1  NPFWL,MXPFW,IBLOCK,
     2  MXACTFW,NFARMS,NSOILS,NCROPS,IRTFL,ICUFL,IPFL,IFTEFL,IIESWFL,
     3  IEFFL,IEBFL,IROTFL,IDEFFL,IBEN,ICOST,ICCFL,INRDFL,MXNRDT,ISRDFL,
     4  IRDFL,ISRRFL,IRRFL,IALLOTSW,IFWLCB,IFNRCB,ISDPFL,IOPFL,IPAPFL,
     5  IFBPFL,IPFWEL,IWELLFLD,QBD,MCLOSE,IRTPFL,IFRMFL,IALLOTGW,       !Added IFRMFL for multiple WBS for each stress period and IALLOTGW for Groundwater Allotments -- rth
     6  MXFWEL,NFWELS,NFWLVL,IFWLAL,IFWLPB,NNPFWL,LENSIM,NAUX,ISTARTFL
        DOUBLE PRECISION,SAVE,POINTER:: PCLOSE,ALLOTSW,QCLOSE,HPCT,RPCT !FORMERLY REAL
        REAL,SAVE,POINTER::PSIRAMPF,SATTHK                              !Added for NWT smoothing of Farm Wells by rth
        INTEGER,SAVE,POINTER::IUNITRAMPF,IRDPSIF                        !Added for NWT smoothing of Farm Wells by rth
        INTEGER,SAVE,POINTER::IETPFL,MAXAUX                             !Added flag for print ET and variable to hold max size of FWLAUX seb
        INTEGER,SAVE,POINTER::SRDACT,SRRACT                             !Added variables to hold current count of SemiRoutedDeliveries and SemiRoutedReturns eg ACTUAL DIM IS ISRD(6,1:ISRDFL), but only use ISRD(6,1:SRDACT)  seb
C
C-------ONE-DIMENSIONAL VARIABLES
        CHARACTER(LEN=16),SAVE,DIMENSION(:),POINTER,CONTIGUOUS:: 
     +                                                FWLAUX,FWLAUXORDER!seb FWLAUXORDER CONTAINS AN ORDERED SET OF STRINGS ORIGINATED FROM FWLAUX TO REMOVE EXCESS LOOPS
        INTEGER,SAVE,DIMENSION(:),POINTER,CONTIGUOUS::
     1                         NWPERF,KNTR,NFSEG,IRDRFL,IFA,ISA,ICA,IVAR
        DOUBLE PRECISION,SAVE,DIMENSION(:),POINTER,CONTIGUOUS::         !FORMERLY REAL
     1  QAVF,QDEF,QEXC,HLIFT,ELHL,SFRADD,FDSEGL,FCSEGL,RDR,DIVADD,DIVTMP
        DOUBLE PRECISION,SAVE,DIMENSION(:),POINTER,CONTIGUOUS::
     1  QMAXF,QREQ,QREQOLD,TFDR,TFDROLD,FLOWINMIN,QSTRMIN,QXTF,QSAVE,   !Added QXTF to keep track of total reduced pumpage for each farm well if NWT-smoothing ena ddeficit irrigation is used rth
     2  FALLOT,QMAXFW,QFRACF                                            !Added QMAXFW to hold original QMAXF values and QFRACF to hold ratio QMAXFW/ALLTOGW --rth
        LOGICAL,SAVE,DIMENSION(:),POINTER,CONTIGUOUS:: LFID             !Added Logical Array to keep track of what Farms are active in current stress period --rth
        CHARACTER(LEN=20),SAVE,DIMENSION(:),POINTER,CONTIGUOUS::MNW2NAM !seb Holds the names of MNW2 linked wells for nonparameter and parameter farm wells.
        INTEGER,SAVE,DIMENSION(:),POINTER,CONTIGUOUS::MNW2LOC           !seb MNW2LOC(I) holds index of the location in variable MNW2 of well MNW2NAM(I), ie for MNW2NAM(I) refers to MNW2(:,MNW2LOC(I))
C
C-------TWO-DIMENSIONAL VARIABLES
        INTEGER,SAVE,DIMENSION(:,:),POINTER,CONTIGUOUS::
     1  IFID,IFIDOLD,ICID,ISID,IFALLOW,IFDRID,IFCRID,ISRD,ISRR,AUXV     !seb ADDED AUXV WHICH WILL HOLD 0 OR 1 FLAG FLAG FOR AUXILLARY VARIABLES  
        DOUBLE PRECISION,SAVE,DIMENSION(:,:),POINTER,CONTIGUOUS::       !FORMERLY REAL
     1  FWELL,GSURF,CU,CU2D,ETR,ROOT,RT2D,PFLX,PFLR,TPPOT,EPPOT,EGW,TGW,
     2  DWE,ETC,RTD,DNR,ELNR,ALLOTGW                                    ! Added ALLTOGW --rth
        DOUBLE PRECISION,SAVE,DIMENSION(:,:),POINTER,CONTIGUOUS::
     1  EFF,EF2D,FIESW,RISERUN,FTE,TDR,SOIL,PSI,TGWO,TGWA,EGWA,
     2  TTOT,ETOT,DPERC,FNRCH,SWRUN,CROPBEN,WATERCOST,REDPCT,
     3  GWREDPCT,SWREDPCT,NRREDPCT,CROPLIST,CLIMATE,UNRD,NRD,WRC,
     4  VFB,OPT
C
C-------THREE-DIMENSIONAL VARIABLES
        DOUBLE PRECISION,SAVE,DIMENSION(:,:,:),POINTER,CONTIGUOUS:: 
     +                                                       SOIL2D,RNRD
C
C-------DERIVED DATA TYPE VARIABLES
      TYPE FMPOUTPUT                                                    !seb HOLD UNIT NUMBERS AND FILE NAMES OF EXTRA FMP I/O
        CHARACTER(20),   DIMENSION(14)::NAME                            !***NOTE THAT THE DIM IS HARD WIRED***
        INTEGER,         DIMENSION(14)::UNIT                            !***NOTE THAT THE DIM IS HARD WIRED***
      END TYPE
      TYPE(FMPOUTPUT),SAVE,POINTER:: FMPOUT
C
      TYPE FARMLOCATION
!        INTEGER:: FID                                                  !NOT CURRENTLY SUPPORTED, WILL EVENTUALLY HOLD THE FARM ID WHEN THE INDEX IS NO LONGER HARDWIRED AS THE FID
        INTEGER:: Count                                                 ! TOTAL NUMBER OF CELLS THAT CONTRAIN THE FARM [FARMLOCATION(1) REFERS TO FARM 1]
        INTEGER,DIMENSION(:,:),ALLOCATABLE:: RC                         ! LOC(1,:) CONTAINS THE ROW LOCATION OF THE FARM; LOC(1=2,:) CONTAINS THE COL LOCATION OF THE FARM
      END TYPE
      TYPE(FARMLOCATION),SAVE,DIMENSION(:),POINTER,CONTIGUOUS:: FMLOC  ! FMLOC(I) CONTAINS THE PROPERTIES OF FARM I
C
      TYPE DRTFLOWLINK
        INTEGER:: FID
        DOUBLE PRECISION::FLO
      END TYPE
      TYPE(DRTFLOWLINK),DIMENSION(:),POINTER,CONTIGUOUS::DRTFLOW
C
      TYPE FMPTYPE 
C
C-------CONSTANTS
        INTEGER,POINTER::
     1  NPFWL,MXPFW,IBLOCK,
     2  MXACTFW,NFARMS,NSOILS,NCROPS,IRTFL,ICUFL,IPFL,IFTEFL,IIESWFL,
     3  IEFFL,IEBFL,IROTFL,IDEFFL,IBEN,ICOST,ICCFL,INRDFL,MXNRDT,ISRDFL,
     4  IRDFL,ISRRFL,IRRFL,IALLOTSW,IFWLCB,IFNRCB,ISDPFL,IOPFL,IPAPFL,
     5  IFBPFL,IPFWEL,IWELLFLD,QBD,MCLOSE,IRTPFL,IFRMFL,IALLOTGW,
     6  MXFWEL,NFWELS,NFWLVL,IFWLAL,IFWLPB,NNPFWL,LENSIM,NAUX,ISTARTFL
        DOUBLE PRECISION,POINTER:: PCLOSE,ALLOTSW,QCLOSE,HPCT,RPCT      !FORMERLY REAL
        REAL,POINTER::PSIRAMPF,SATTHK                                   !Added for NWT smoothing of Farm Wells by rth
        INTEGER,POINTER::IUNITRAMPF,IRDPSIF                             !Added for NWT smoothing of Farm Wells by rth
        INTEGER,POINTER::IETPFL,MAXAUX                                  !Added flag for print ET and variable to hold max size of FWLAUX seb
        INTEGER,POINTER::SRDACT,SRRACT                                  !Added variables to hold current count of SemiRoutedDeliveries and SemiRoutedReturns eg ACTUAL DIM IS ISRD(6,1:ISRDFL), but only use ISRD(6,1:SRDACT)  seb
C
C-------ONE-DIMENSIONAL VARIABLES
        CHARACTER(LEN=16),DIMENSION(:),POINTER,CONTIGUOUS::
     +                                           FWLAUX,FWLAUXORDER     !seb FWLAUXORDER CONTAINS AN ORDERED SET OF STRINGS ORIGINATED FROM FWLAUX TO REMOVE EXCESS LOOPS
        INTEGER,DIMENSION(:),POINTER,CONTIGUOUS:: 
     1                         NWPERF,KNTR,NFSEG,IRDRFL,IFA,ISA,ICA,IVAR
        DOUBLE PRECISION,DIMENSION(:),POINTER,CONTIGUOUS::              !FORMERLY REAL
     1  QAVF,QDEF,QEXC,HLIFT,ELHL,SFRADD,FDSEGL,FCSEGL,RDR,DIVADD,DIVTMP
        DOUBLE PRECISION,DIMENSION(:),POINTER,CONTIGUOUS::
     1  QMAXF,QREQ,QREQOLD,TFDR,TFDROLD,FLOWINMIN,QSTRMIN,QXTF,QSAVE,   !Added QXTF to keep track of total reduced pumpage for each farm well if NWT-smoothing ena ddeficit irrigation is used rth
     2  FALLOT,QMAXFW,QFRACF                                            !Added QMAXFW to hold original QMAXF values and QFRACF to hold ratio QMAXFW/ALLTOGW--rth
        LOGICAL,DIMENSION(:),POINTER,CONTIGUOUS:: LFID                  !Added Logical Array to keep track of what Farms are active in current stress period --rth
        CHARACTER(LEN=20),DIMENSION(:),POINTER,CONTIGUOUS::MNW2NAM      !seb Holds the names of MNW2 linked wells for nonparameter and parameter farm wells.
        INTEGER,DIMENSION(:),POINTER,CONTIGUOUS::MNW2LOC                !seb MNW2LOC(I) holds index of the location in variable MNW2 of well MNW2NAM(I), ie for MNW2NAM(I) refers to MNW2(:,MNW2LOC(I))
C
C-------TWO-DIMENSIONAL VARIABLES
        INTEGER,DIMENSION(:,:),POINTER,CONTIGUOUS::
     1  IFID,IFIDOLD,ICID,ISID,IFALLOW,IFDRID,IFCRID,ISRD,ISRR,AUXV     !seb ADDED AUXV WHICH WILL HOLD 0 OR 1 FLAG FLAG FOR AUXILLARY VARIABLES    
        DOUBLE PRECISION,DIMENSION(:,:),POINTER,CONTIGUOUS::            !FORMERLY REAL
     1  FWELL,GSURF,CU,CU2D,ETR,ROOT,RT2D,PFLX,PFLR,TPPOT,EPPOT,EGW,TGW,
     2  DWE,ETC,RTD,DNR,ELNR,ALLOTGW                                    !Added ALLTOGW
        DOUBLE PRECISION,DIMENSION(:,:),POINTER,CONTIGUOUS::
     1  EFF,EF2D,FIESW,RISERUN,FTE,TDR,SOIL,PSI,TGWO,TGWA,EGWA,
     2  TTOT,ETOT,DPERC,FNRCH,SWRUN,CROPBEN,WATERCOST,REDPCT,
     3  GWREDPCT,SWREDPCT,NRREDPCT,CROPLIST,CLIMATE,UNRD,NRD,WRC,
     4  VFB,OPT
C
C-------THREE-DIMENSIONAL VARIABLES
        DOUBLE PRECISION,DIMENSION(:,:,:),POINTER,CONTIGUOUS:: 
     +                                                       SOIL2D,RNRD
C
C-------DERIVED DATA TYPE VARIABLES  seb
        TYPE(FMPOUTPUT),POINTER:: FMPOUT
        TYPE(FARMLOCATION),DIMENSION(:),POINTER,CONTIGUOUS:: FMLOC
        TYPE(DRTFLOWLINK),DIMENSION(:),POINTER,CONTIGUOUS::DRTFLOW
C
      END TYPE
      TYPE(FMPTYPE), SAVE:: FMPDAT(16)
      !TYPE(FMPTYPE), SAVE,POINTER,DIMENSION(:),CONTIGUOUS:: FMPDAT
C=======================================================================
      CONTAINS
C
      SUBROUTINE SFMP3PNT(IGRID)
C     ******************************************************************      
C     Change FMP data to a different grid.
C     ******************************************************************
C        SPECIFICATIONS:
C     ------------------------------------------------------------------
      !USE FMPMODULE
      INTEGER,INTENT(IN)::IGRID
C     ------------------------------------------------------------------
C        ARGUMENTS:
C     ------------------------------------------------------------------
C      INTEGER IGRID
C     ------------------------------------------------------------------
C seb
        FMLOC      =>FMPDAT(IGRID)%FMLOC
        DRTFLOW    =>FMPDAT(IGRID)%DRTFLOW
        FMPOUT     =>FMPDAT(IGRID)%FMPOUT
        MNW2NAM    =>FMPDAT(IGRID)%MNW2NAM
        MNW2LOC    =>FMPDAT(IGRID)%MNW2LOC
        MAXAUX     =>FMPDAT(IGRID)%MAXAUX     
        FWLAUXORDER=>FMPDAT(IGRID)%FWLAUXORDER
        AUXV       =>FMPDAT(IGRID)%AUXV
        SRDACT     =>FMPDAT(IGRID)%SRDACT
        SRRACT     =>FMPDAT(IGRID)%SRRACT
ccrth
        PSIRAMPF=>FMPDAT(IGRID)%PSIRAMPF
        SATTHK=>FMPDAT(IGRID)%SATTHK
        IUNITRAMPF=>FMPDAT(IGRID)%IUNITRAMPF       
        QXTF=>FMPDAT(IGRID)%QXTF
        QSAVE=>FMPDAT(IGRID)%QSAVE
ccrth
        NPFWL=>FMPDAT(IGRID)%NPFWL
        MXPFW=>FMPDAT(IGRID)%MXPFW
        IBLOCK=>FMPDAT(IGRID)%IBLOCK
        MXACTFW=>FMPDAT(IGRID)%MXACTFW
        NFARMS=>FMPDAT(IGRID)%NFARMS
        NSOILS=>FMPDAT(IGRID)%NSOILS
        NCROPS=>FMPDAT(IGRID)%NCROPS
        IRTFL=>FMPDAT(IGRID)%IRTFL
        ICUFL=>FMPDAT(IGRID)%ICUFL
        IPFL=>FMPDAT(IGRID)%IPFL
        IFTEFL=>FMPDAT(IGRID)%IFTEFL
        IIESWFL=>FMPDAT(IGRID)%IIESWFL
        IEFFL=>FMPDAT(IGRID)%IEFFL
        IEBFL=>FMPDAT(IGRID)%IEBFL
        IROTFL=>FMPDAT(IGRID)%IROTFL
        IDEFFL=>FMPDAT(IGRID)%IDEFFL
        IBEN=>FMPDAT(IGRID)%IBEN
        ICOST=>FMPDAT(IGRID)%ICOST
        ICCFL=>FMPDAT(IGRID)%ICCFL
        INRDFL=>FMPDAT(IGRID)%INRDFL
        MXNRDT=>FMPDAT(IGRID)%MXNRDT
        ISRDFL=>FMPDAT(IGRID)%ISRDFL
        IRDFL=>FMPDAT(IGRID)%IRDFL
        ISRRFL=>FMPDAT(IGRID)%ISRRFL
        IRRFL=>FMPDAT(IGRID)%IRRFL
        IALLOTSW=>FMPDAT(IGRID)%IALLOTSW
        IALLOTGW=>FMPDAT(IGRID)%IALLOTGW
        IFWLCB=>FMPDAT(IGRID)%IFWLCB
        IFNRCB=>FMPDAT(IGRID)%IFNRCB
        ISDPFL=>FMPDAT(IGRID)%ISDPFL
        IOPFL=>FMPDAT(IGRID)%IOPFL
        IPAPFL=>FMPDAT(IGRID)%IPAPFL
        IFBPFL=>FMPDAT(IGRID)%IFBPFL
        IPFWEL=>FMPDAT(IGRID)%IPFWEL
        IWELLFLD=>FMPDAT(IGRID)%IWELLFLD
        QBD=>FMPDAT(IGRID)%QBD
        MCLOSE=>FMPDAT(IGRID)%MCLOSE
        IRTPFL=>FMPDAT(IGRID)%IRTPFL
        MXFWEL=>FMPDAT(IGRID)%MXFWEL
        NFWELS=>FMPDAT(IGRID)%NFWELS
        NFWLVL=>FMPDAT(IGRID)%NFWLVL
        IFWLAL=>FMPDAT(IGRID)%IFWLAL
        IFWLPB=>FMPDAT(IGRID)%IFWLPB
        NNPFWL=>FMPDAT(IGRID)%NNPFWL
        LENSIM=>FMPDAT(IGRID)%LENSIM
        NAUX=>FMPDAT(IGRID)%NAUX
        ISTARTFL=>FMPDAT(IGRID)%ISTARTFL
        PCLOSE=>FMPDAT(IGRID)%PCLOSE
        ALLOTSW=>FMPDAT(IGRID)%ALLOTSW
        ALLOTGW=>FMPDAT(IGRID)%ALLOTGW
        QCLOSE=>FMPDAT(IGRID)%QCLOSE
        HPCT=>FMPDAT(IGRID)%HPCT
        RPCT=>FMPDAT(IGRID)%RPCT    
        FWLAUX=>FMPDAT(IGRID)%FWLAUX
        NWPERF=>FMPDAT(IGRID)%NWPERF
        KNTR=>FMPDAT(IGRID)%KNTR
        NFSEG=>FMPDAT(IGRID)%NFSEG
        IRDRFL=>FMPDAT(IGRID)%IRDRFL
        IFA=>FMPDAT(IGRID)%IFA
        ISA=>FMPDAT(IGRID)%ISA
        ICA=>FMPDAT(IGRID)%ICA
        IVAR=>FMPDAT(IGRID)%IVAR
        QAVF=>FMPDAT(IGRID)%QAVF
        QDEF=>FMPDAT(IGRID)%QDEF
        QEXC=>FMPDAT(IGRID)%QEXC
        HLIFT=>FMPDAT(IGRID)%HLIFT
        ELHL=>FMPDAT(IGRID)%ELHL
        SFRADD=>FMPDAT(IGRID)%SFRADD
        FDSEGL=>FMPDAT(IGRID)%FDSEGL
        FCSEGL=>FMPDAT(IGRID)%FCSEGL
        RDR=>FMPDAT(IGRID)%RDR
        DIVADD=>FMPDAT(IGRID)%DIVADD
        DIVTMP=>FMPDAT(IGRID)%DIVTMP
        QMAXF=>FMPDAT(IGRID)%QMAXF
        QREQ=>FMPDAT(IGRID)%QREQ
        QREQOLD=>FMPDAT(IGRID)%QREQOLD
        TFDR=>FMPDAT(IGRID)%TFDR
        TFDROLD=>FMPDAT(IGRID)%TFDROLD
        FLOWINMIN=>FMPDAT(IGRID)%FLOWINMIN
        QSTRMIN=>FMPDAT(IGRID)%QSTRMIN
        FALLOT=>FMPDAT(IGRID)%FALLOT
        IFID=>FMPDAT(IGRID)%IFID
        LFID=>FMPDAT(IGRID)%LFID
        IFIDOLD=>FMPDAT(IGRID)%IFIDOLD
        ICID=>FMPDAT(IGRID)%ICID
        ISID=>FMPDAT(IGRID)%ISID
        IFALLOW=>FMPDAT(IGRID)%IFALLOW
        IFDRID=>FMPDAT(IGRID)%IFDRID
        IFCRID=>FMPDAT(IGRID)%IFCRID
        ISRD=>FMPDAT(IGRID)%ISRD
        ISRR=>FMPDAT(IGRID)%ISRR
        FWELL=>FMPDAT(IGRID)%FWELL
        GSURF=>FMPDAT(IGRID)%GSURF
        CU=>FMPDAT(IGRID)%CU
        CU2D=>FMPDAT(IGRID)%CU2D
        ETR=>FMPDAT(IGRID)%ETR        
        ROOT=>FMPDAT(IGRID)%ROOT
        RT2D=>FMPDAT(IGRID)%RT2D
        PFLX=>FMPDAT(IGRID)%PFLX
        PFLR=>FMPDAT(IGRID)%PFLR
        TPPOT=>FMPDAT(IGRID)%TPPOT
        EPPOT=>FMPDAT(IGRID)%EPPOT
        EGW=>FMPDAT(IGRID)%EGW
        TGW=>FMPDAT(IGRID)%TGW
        DWE=>FMPDAT(IGRID)%DWE
        ETC=>FMPDAT(IGRID)%ETC
        RTD=>FMPDAT(IGRID)%RTD
        DNR=>FMPDAT(IGRID)%DNR
        ELNR=>FMPDAT(IGRID)%ELNR
        EFF=>FMPDAT(IGRID)%EFF
        EF2D=>FMPDAT(IGRID)%EF2D
        FIESW=>FMPDAT(IGRID)%FIESW
        RISERUN=>FMPDAT(IGRID)%RISERUN
        FTE=>FMPDAT(IGRID)%FTE
        TDR=>FMPDAT(IGRID)%TDR
        SOIL=>FMPDAT(IGRID)%SOIL
        PSI=>FMPDAT(IGRID)%PSI
        TGWO=>FMPDAT(IGRID)%TGWO
        TGWA=>FMPDAT(IGRID)%TGWA
        EGWA=>FMPDAT(IGRID)%EGWA
        TTOT=>FMPDAT(IGRID)%TTOT
        ETOT=>FMPDAT(IGRID)%ETOT
        DPERC=>FMPDAT(IGRID)%DPERC
        FNRCH=>FMPDAT(IGRID)%FNRCH
        SWRUN=>FMPDAT(IGRID)%SWRUN
        CROPBEN=>FMPDAT(IGRID)%CROPBEN
        WATERCOST=>FMPDAT(IGRID)%WATERCOST
        REDPCT=>FMPDAT(IGRID)%REDPCT
        GWREDPCT=>FMPDAT(IGRID)%GWREDPCT
        SWREDPCT=>FMPDAT(IGRID)%SWREDPCT
        NRREDPCT=>FMPDAT(IGRID)%NRREDPCT
        CROPLIST=>FMPDAT(IGRID)%CROPLIST
        CLIMATE=>FMPDAT(IGRID)%CLIMATE
        UNRD=>FMPDAT(IGRID)%UNRD
        NRD=>FMPDAT(IGRID)%NRD
        WRC=>FMPDAT(IGRID)%WRC
        VFB=>FMPDAT(IGRID)%VFB
        OPT=>FMPDAT(IGRID)%OPT        
        SOIL2D=>FMPDAT(IGRID)%SOIL2D
        RNRD=>FMPDAT(IGRID)%RNRD
        IFRMFL=>FMPDAT(IGRID)%IFRMFL

      RETURN
      END SUBROUTINE
C
      SUBROUTINE SFMP3PSV(IGRID)
C     ******************************************************************
C     Save FMP data for a grid.
C     ******************************************************************
C        SPECIFICATIONS:
C     ------------------------------------------------------------------
      !USE FMPMODULE
      !IMPLICIT NONE
      INTEGER,INTENT(IN)::IGRID
C     ------------------------------------------------------------------
C        ARGUMENTS:
C     ------------------------------------------------------------------
C      INTEGER IGRID
C     ------------------------------------------------------------------
C seb
        FMPDAT(IGRID)%FMLOC      =>FMLOC
        FMPDAT(IGRID)%DRTFLOW    =>DRTFLOW
        FMPDAT(IGRID)%FMPOUT     =>FMPOUT
        FMPDAT(IGRID)%MNW2NAM    =>MNW2NAM
        FMPDAT(IGRID)%MNW2LOC    =>MNW2LOC
        FMPDAT(IGRID)%MAXAUX     =>MAXAUX
        FMPDAT(IGRID)%FWLAUXORDER=>FWLAUXORDER
        FMPDAT(IGRID)%AUXV       =>AUXV
        FMPDAT(IGRID)%SRDACT     =>SRDACT
        FMPDAT(IGRID)%SRRACT     =>SRRACT
ccrth
        FMPDAT(IGRID)%PSIRAMPF=>PSIRAMPF
        FMPDAT(IGRID)%SATTHK=>SATTHK
        FMPDAT(IGRID)%IUNITRAMPF=>IUNITRAMPF
        FMPDAT(IGRID)%QXTF=>QXTF
        FMPDAT(IGRID)%QSAVE=>QSAVE        
ccrth
        FMPDAT(IGRID)%NPFWL=>NPFWL
        FMPDAT(IGRID)%MXPFW=>MXPFW
        FMPDAT(IGRID)%IBLOCK=>IBLOCK
        FMPDAT(IGRID)%MXACTFW=>MXACTFW
        FMPDAT(IGRID)%NFARMS=>NFARMS
        FMPDAT(IGRID)%NSOILS=>NSOILS
        FMPDAT(IGRID)%NCROPS=>NCROPS
        FMPDAT(IGRID)%IRTFL=>IRTFL
        FMPDAT(IGRID)%ICUFL=>ICUFL
        FMPDAT(IGRID)%IPFL=>IPFL
        FMPDAT(IGRID)%IFTEFL=>IFTEFL
        FMPDAT(IGRID)%IIESWFL=>IIESWFL
        FMPDAT(IGRID)%IEFFL=>IEFFL
        FMPDAT(IGRID)%IEBFL=>IEBFL
        FMPDAT(IGRID)%IROTFL=>IROTFL
        FMPDAT(IGRID)%IDEFFL=>IDEFFL
        FMPDAT(IGRID)%IBEN=>IBEN
        FMPDAT(IGRID)%ICOST=>ICOST
        FMPDAT(IGRID)%ICCFL=>ICCFL
        FMPDAT(IGRID)%INRDFL=>INRDFL
        FMPDAT(IGRID)%MXNRDT=>MXNRDT
        FMPDAT(IGRID)%ISRDFL=>ISRDFL
        FMPDAT(IGRID)%IRDFL=>IRDFL
        FMPDAT(IGRID)%ISRRFL=>ISRRFL
        FMPDAT(IGRID)%IRRFL=>IRRFL
        FMPDAT(IGRID)%IALLOTSW=>IALLOTSW
        FMPDAT(IGRID)%IALLOTGW=>IALLOTGW
        FMPDAT(IGRID)%IFWLCB=>IFWLCB
        FMPDAT(IGRID)%IFNRCB=>IFNRCB
        FMPDAT(IGRID)%ISDPFL=>ISDPFL
        FMPDAT(IGRID)%IOPFL=>IOPFL
        FMPDAT(IGRID)%IPAPFL=>IPAPFL
        FMPDAT(IGRID)%IFBPFL=>IFBPFL
        FMPDAT(IGRID)%IPFWEL=>IPFWEL
        FMPDAT(IGRID)%IWELLFLD=>IWELLFLD
        FMPDAT(IGRID)%QBD=>QBD
        FMPDAT(IGRID)%MCLOSE=>MCLOSE
        FMPDAT(IGRID)%IRTPFL=>IRTPFL
        FMPDAT(IGRID)%MXFWEL=>MXFWEL
        FMPDAT(IGRID)%NFWELS=>NFWELS
        FMPDAT(IGRID)%NFWLVL=>NFWLVL
        FMPDAT(IGRID)%IFWLAL=>IFWLAL
        FMPDAT(IGRID)%IFWLPB=>IFWLPB
        FMPDAT(IGRID)%NNPFWL=>NNPFWL
        FMPDAT(IGRID)%LENSIM=>LENSIM
        FMPDAT(IGRID)%NAUX=>NAUX
        FMPDAT(IGRID)%ISTARTFL=>ISTARTFL
        FMPDAT(IGRID)%PCLOSE=>PCLOSE
        FMPDAT(IGRID)%ALLOTSW=>ALLOTSW
        FMPDAT(IGRID)%ALLOTGW=>ALLOTGW
        FMPDAT(IGRID)%QCLOSE=>QCLOSE
        FMPDAT(IGRID)%HPCT=>HPCT
        FMPDAT(IGRID)%RPCT=>RPCT        
        FMPDAT(IGRID)%FWLAUX=>FWLAUX
        FMPDAT(IGRID)%NWPERF=>NWPERF
        FMPDAT(IGRID)%KNTR=>KNTR
        FMPDAT(IGRID)%NFSEG=>NFSEG
        FMPDAT(IGRID)%IRDRFL=>IRDRFL
        FMPDAT(IGRID)%IFA=>IFA
        FMPDAT(IGRID)%ISA=>ISA
        FMPDAT(IGRID)%ICA=>ICA
        FMPDAT(IGRID)%IVAR=>IVAR
        FMPDAT(IGRID)%QAVF=>QAVF
        FMPDAT(IGRID)%QDEF=>QDEF
        FMPDAT(IGRID)%QEXC=>QEXC
        FMPDAT(IGRID)%HLIFT=>HLIFT
        FMPDAT(IGRID)%ELHL=>ELHL
        FMPDAT(IGRID)%SFRADD=>SFRADD
        FMPDAT(IGRID)%FDSEGL=>FDSEGL
        FMPDAT(IGRID)%FCSEGL=>FCSEGL
        FMPDAT(IGRID)%RDR=>RDR
        FMPDAT(IGRID)%DIVADD=>DIVADD
        FMPDAT(IGRID)%DIVTMP=>DIVTMP
        FMPDAT(IGRID)%QMAXF=>QMAXF
        FMPDAT(IGRID)%QREQ=>QREQ
        FMPDAT(IGRID)%QREQOLD=>QREQOLD
        FMPDAT(IGRID)%TFDR=>TFDR
        FMPDAT(IGRID)%TFDROLD=>TFDROLD
        FMPDAT(IGRID)%FLOWINMIN=>FLOWINMIN
        FMPDAT(IGRID)%QSTRMIN=>QSTRMIN
        FMPDAT(IGRID)%FALLOT=>FALLOT
        FMPDAT(IGRID)%IFID=>IFID
        FMPDAT(IGRID)%LFID=>LFID
        FMPDAT(IGRID)%IFIDOLD=>IFIDOLD
        FMPDAT(IGRID)%ICID=>ICID
        FMPDAT(IGRID)%ISID=>ISID
        FMPDAT(IGRID)%IFALLOW=>IFALLOW
        FMPDAT(IGRID)%IFDRID=>IFDRID
        FMPDAT(IGRID)%IFCRID=>IFCRID
        FMPDAT(IGRID)%ISRD=>ISRD
        FMPDAT(IGRID)%ISRR=>ISRR
        FMPDAT(IGRID)%FWELL=>FWELL
        FMPDAT(IGRID)%GSURF=>GSURF
        FMPDAT(IGRID)%CU=>CU
        FMPDAT(IGRID)%CU2D=>CU2D
        FMPDAT(IGRID)%ETR=>ETR        
        FMPDAT(IGRID)%ROOT=>ROOT
        FMPDAT(IGRID)%RT2D=>RT2D
        FMPDAT(IGRID)%PFLX=>PFLX
        FMPDAT(IGRID)%PFLR=>PFLR
        FMPDAT(IGRID)%TPPOT=>TPPOT
        FMPDAT(IGRID)%EPPOT=>EPPOT
        FMPDAT(IGRID)%EGW=>EGW
        FMPDAT(IGRID)%TGW=>TGW
        FMPDAT(IGRID)%DWE=>DWE
        FMPDAT(IGRID)%ETC=>ETC
        FMPDAT(IGRID)%RTD=>RTD
        FMPDAT(IGRID)%DNR=>DNR
        FMPDAT(IGRID)%ELNR=>ELNR
        FMPDAT(IGRID)%EFF=>EFF
        FMPDAT(IGRID)%EF2D=>EF2D
        FMPDAT(IGRID)%FIESW=>FIESW
        FMPDAT(IGRID)%RISERUN=>RISERUN
        FMPDAT(IGRID)%FTE=>FTE
        FMPDAT(IGRID)%TDR=>TDR
        FMPDAT(IGRID)%SOIL=>SOIL
        FMPDAT(IGRID)%PSI=>PSI
        FMPDAT(IGRID)%TGWO=>TGWO
        FMPDAT(IGRID)%TGWA=>TGWA
        FMPDAT(IGRID)%EGWA=>EGWA
        FMPDAT(IGRID)%TTOT=>TTOT
        FMPDAT(IGRID)%ETOT=>ETOT
        FMPDAT(IGRID)%DPERC=>DPERC
        FMPDAT(IGRID)%FNRCH=>FNRCH
        FMPDAT(IGRID)%SWRUN=>SWRUN
        FMPDAT(IGRID)%CROPBEN=>CROPBEN
        FMPDAT(IGRID)%WATERCOST=>WATERCOST
        FMPDAT(IGRID)%REDPCT=>REDPCT
        FMPDAT(IGRID)%GWREDPCT=>GWREDPCT
        FMPDAT(IGRID)%SWREDPCT=>SWREDPCT
        FMPDAT(IGRID)%NRREDPCT=>NRREDPCT
        FMPDAT(IGRID)%CROPLIST=>CROPLIST
        FMPDAT(IGRID)%CLIMATE=>CLIMATE
        FMPDAT(IGRID)%UNRD=>UNRD
        FMPDAT(IGRID)%NRD=>NRD
        FMPDAT(IGRID)%WRC=>WRC
        FMPDAT(IGRID)%VFB=>VFB
        FMPDAT(IGRID)%OPT=>OPT        
        FMPDAT(IGRID)%SOIL2D=>SOIL2D
        FMPDAT(IGRID)%RNRD=>RNRD
        FMPDAT(IGRID)%IFRMFL=>IFRMFL
      RETURN
      END SUBROUTINE
C   
      SUBROUTINE FMP3DA(IGRID)
C     ******************************************************************      
C     Save FMP data for a grid. Deallocate FMP MEMORY
C     ******************************************************************
C        SPECIFICATIONS:
C     ------------------------------------------------------------------
      !USE FMPMODULE
      INTEGER,INTENT(IN)::IGRID
C     ------------------------------------------------------------------
C        ARGUMENTS:
C     ------------------------------------------------------------------
      !INTEGER IGRID
C     ------------------------------------------------------------------
C seb
        DEALLOCATE(FMPDAT(IGRID)%FMLOC)
        DEALLOCATE(FMPDAT(IGRID)%DRTFLOW)
        DEALLOCATE(FMPDAT(IGRID)%FMPOUT)
        DEALLOCATE(FMPDAT(IGRID)%MNW2NAM)
        DEALLOCATE(FMPDAT(IGRID)%MNW2LOC)
        DEALLOCATE(FMPDAT(IGRID)%MAXAUX)
        DEALLOCATE(FMPDAT(IGRID)%FWLAUXORDER)
        DEALLOCATE(FMPDAT(IGRID)%AUXV)
        DEALLOCATE(FMPDAT(IGRID)%SRDACT)
        DEALLOCATE(FMPDAT(IGRID)%SRRACT)
ccrth
        DEALLOCATE(FMPDAT(IGRID)%PSIRAMPF) 
        DEALLOCATE(FMPDAT(IGRID)%SATTHK) 
        DEALLOCATE(FMPDAT(IGRID)%IUNITRAMPF) 
        DEALLOCATE(FMPDAT(IGRID)%QXTF)
        DEALLOCATE(FMPDAT(IGRID)%QSAVE)
ccrth
        DEALLOCATE(FMPDAT(IGRID)%NPFWL)
        DEALLOCATE(FMPDAT(IGRID)%MXPFW)
        DEALLOCATE(FMPDAT(IGRID)%IBLOCK)
        DEALLOCATE(FMPDAT(IGRID)%MXACTFW)
        DEALLOCATE(FMPDAT(IGRID)%NFARMS)
        DEALLOCATE(FMPDAT(IGRID)%NSOILS)
        DEALLOCATE(FMPDAT(IGRID)%NCROPS)
        DEALLOCATE(FMPDAT(IGRID)%IRTFL)
        DEALLOCATE(FMPDAT(IGRID)%ICUFL)
        DEALLOCATE(FMPDAT(IGRID)%IPFL)
        DEALLOCATE(FMPDAT(IGRID)%IFTEFL)
        DEALLOCATE(FMPDAT(IGRID)%IIESWFL)
        DEALLOCATE(FMPDAT(IGRID)%IEFFL)
        DEALLOCATE(FMPDAT(IGRID)%IEBFL)
        DEALLOCATE(FMPDAT(IGRID)%IROTFL)
        DEALLOCATE(FMPDAT(IGRID)%IDEFFL)
        DEALLOCATE(FMPDAT(IGRID)%IBEN)
        DEALLOCATE(FMPDAT(IGRID)%ICOST)
        DEALLOCATE(FMPDAT(IGRID)%ICCFL)
        DEALLOCATE(FMPDAT(IGRID)%INRDFL)
        DEALLOCATE(FMPDAT(IGRID)%MXNRDT)
        DEALLOCATE(FMPDAT(IGRID)%ISRDFL)
        DEALLOCATE(FMPDAT(IGRID)%IRDFL)
        DEALLOCATE(FMPDAT(IGRID)%ISRRFL)
        DEALLOCATE(FMPDAT(IGRID)%IRRFL)
        DEALLOCATE(FMPDAT(IGRID)%IALLOTSW)
        DEALLOCATE(FMPDAT(IGRID)%IALLOTGW)
        DEALLOCATE(FMPDAT(IGRID)%IFWLCB)
        DEALLOCATE(FMPDAT(IGRID)%IFNRCB)
        DEALLOCATE(FMPDAT(IGRID)%ISDPFL)
        DEALLOCATE(FMPDAT(IGRID)%IOPFL)
        DEALLOCATE(FMPDAT(IGRID)%IPAPFL)
        DEALLOCATE(FMPDAT(IGRID)%IFBPFL)
        DEALLOCATE(FMPDAT(IGRID)%IPFWEL)
        DEALLOCATE(FMPDAT(IGRID)%IWELLFLD)
        DEALLOCATE(FMPDAT(IGRID)%QBD)
        DEALLOCATE(FMPDAT(IGRID)%MCLOSE)
        DEALLOCATE(FMPDAT(IGRID)%IRTPFL)
        DEALLOCATE(FMPDAT(IGRID)%MXFWEL)
        DEALLOCATE(FMPDAT(IGRID)%NFWELS)
        DEALLOCATE(FMPDAT(IGRID)%NFWLVL)
        DEALLOCATE(FMPDAT(IGRID)%IFWLAL)
        DEALLOCATE(FMPDAT(IGRID)%IFWLPB)
        DEALLOCATE(FMPDAT(IGRID)%NNPFWL)
        DEALLOCATE(FMPDAT(IGRID)%LENSIM)
        DEALLOCATE(FMPDAT(IGRID)%NAUX)
        DEALLOCATE(FMPDAT(IGRID)%ISTARTFL)        
        DEALLOCATE(FMPDAT(IGRID)%PCLOSE)
        DEALLOCATE(FMPDAT(IGRID)%ALLOTSW)
cc        IF(ALLOCATED(FMPDAT(IGRID)%ALLOTGW))
cc     &    DEALLOCATE(FMPDAT(IGRID)%ALLOTGW)
        DEALLOCATE(FMPDAT(IGRID)%QCLOSE)
        DEALLOCATE(FMPDAT(IGRID)%HPCT)
        DEALLOCATE(FMPDAT(IGRID)%RPCT)
        DEALLOCATE(FMPDAT(IGRID)%FWLAUX)
        DEALLOCATE(FMPDAT(IGRID)%NWPERF)
        DEALLOCATE(FMPDAT(IGRID)%KNTR)
        DEALLOCATE(FMPDAT(IGRID)%NFSEG)
        DEALLOCATE(FMPDAT(IGRID)%IRDRFL)
        DEALLOCATE(FMPDAT(IGRID)%IFA)
        DEALLOCATE(FMPDAT(IGRID)%ISA)
        DEALLOCATE(FMPDAT(IGRID)%ICA)
        DEALLOCATE(FMPDAT(IGRID)%IVAR)        
        DEALLOCATE(FMPDAT(IGRID)%QAVF)
        DEALLOCATE(FMPDAT(IGRID)%QDEF)
        DEALLOCATE(FMPDAT(IGRID)%QEXC)
        DEALLOCATE(FMPDAT(IGRID)%HLIFT)
        DEALLOCATE(FMPDAT(IGRID)%ELHL)
        DEALLOCATE(FMPDAT(IGRID)%SFRADD)
        DEALLOCATE(FMPDAT(IGRID)%FDSEGL)
        DEALLOCATE(FMPDAT(IGRID)%FCSEGL)
        DEALLOCATE(FMPDAT(IGRID)%RDR)
        DEALLOCATE(FMPDAT(IGRID)%DIVADD)
        DEALLOCATE(FMPDAT(IGRID)%DIVTMP)
        DEALLOCATE(FMPDAT(IGRID)%QMAXF)
        DEALLOCATE(FMPDAT(IGRID)%QREQ)
        DEALLOCATE(FMPDAT(IGRID)%QREQOLD)
        DEALLOCATE(FMPDAT(IGRID)%TFDR)
        DEALLOCATE(FMPDAT(IGRID)%TFDROLD)
        DEALLOCATE(FMPDAT(IGRID)%FLOWINMIN)
        DEALLOCATE(FMPDAT(IGRID)%QSTRMIN)
        DEALLOCATE(FMPDAT(IGRID)%FALLOT)
        DEALLOCATE(FMPDAT(IGRID)%IFID)
        DEALLOCATE(FMPDAT(IGRID)%LFID)
        DEALLOCATE(FMPDAT(IGRID)%IFIDOLD)        
        DEALLOCATE(FMPDAT(IGRID)%ICID)
        DEALLOCATE(FMPDAT(IGRID)%ISID)
        DEALLOCATE(FMPDAT(IGRID)%IFALLOW)
        DEALLOCATE(FMPDAT(IGRID)%IFDRID)
        DEALLOCATE(FMPDAT(IGRID)%IFCRID)
        DEALLOCATE(FMPDAT(IGRID)%ISRD)
        DEALLOCATE(FMPDAT(IGRID)%ISRR)
        DEALLOCATE(FMPDAT(IGRID)%FWELL)
        DEALLOCATE(FMPDAT(IGRID)%GSURF)
        DEALLOCATE(FMPDAT(IGRID)%CU)
        DEALLOCATE(FMPDAT(IGRID)%CU2D)
        DEALLOCATE(FMPDAT(IGRID)%ETR)
        DEALLOCATE(FMPDAT(IGRID)%ROOT)
        DEALLOCATE(FMPDAT(IGRID)%RT2D)
        DEALLOCATE(FMPDAT(IGRID)%PFLX)
        DEALLOCATE(FMPDAT(IGRID)%PFLR)
        DEALLOCATE(FMPDAT(IGRID)%TPPOT)
        DEALLOCATE(FMPDAT(IGRID)%EPPOT)
        DEALLOCATE(FMPDAT(IGRID)%EGW)
        DEALLOCATE(FMPDAT(IGRID)%TGW)
        DEALLOCATE(FMPDAT(IGRID)%DWE)
        DEALLOCATE(FMPDAT(IGRID)%ETC)
        DEALLOCATE(FMPDAT(IGRID)%RTD)
        DEALLOCATE(FMPDAT(IGRID)%DNR)
        DEALLOCATE(FMPDAT(IGRID)%ELNR)  
        DEALLOCATE(FMPDAT(IGRID)%EFF)
        DEALLOCATE(FMPDAT(IGRID)%EF2D)
        DEALLOCATE(FMPDAT(IGRID)%FIESW)
        DEALLOCATE(FMPDAT(IGRID)%RISERUN)
        DEALLOCATE(FMPDAT(IGRID)%FTE)
        DEALLOCATE(FMPDAT(IGRID)%TDR)
        DEALLOCATE(FMPDAT(IGRID)%SOIL)
        DEALLOCATE(FMPDAT(IGRID)%PSI)
        DEALLOCATE(FMPDAT(IGRID)%TGWO)
        DEALLOCATE(FMPDAT(IGRID)%TGWA)
        DEALLOCATE(FMPDAT(IGRID)%EGWA)     
        DEALLOCATE(FMPDAT(IGRID)%TTOT)
        DEALLOCATE(FMPDAT(IGRID)%ETOT)
        DEALLOCATE(FMPDAT(IGRID)%DPERC)
        DEALLOCATE(FMPDAT(IGRID)%FNRCH)
        DEALLOCATE(FMPDAT(IGRID)%SWRUN)
        DEALLOCATE(FMPDAT(IGRID)%CROPBEN)
        DEALLOCATE(FMPDAT(IGRID)%WATERCOST)
        DEALLOCATE(FMPDAT(IGRID)%REDPCT)
        DEALLOCATE(FMPDAT(IGRID)%GWREDPCT)
        DEALLOCATE(FMPDAT(IGRID)%SWREDPCT)
        DEALLOCATE(FMPDAT(IGRID)%NRREDPCT)
        DEALLOCATE(FMPDAT(IGRID)%CROPLIST)
        DEALLOCATE(FMPDAT(IGRID)%CLIMATE)
        DEALLOCATE(FMPDAT(IGRID)%UNRD)
        DEALLOCATE(FMPDAT(IGRID)%NRD)
        DEALLOCATE(FMPDAT(IGRID)%WRC)
        DEALLOCATE(FMPDAT(IGRID)%VFB)
        DEALLOCATE(FMPDAT(IGRID)%OPT)
        DEALLOCATE(FMPDAT(IGRID)%SOIL2D)
        DEALLOCATE(FMPDAT(IGRID)%RNRD)
C
C NULLIFY THE LOCAL POINTERS
      IF(IGRID.EQ.1)THEN
C seb
        FMLOC      =>NULL()
        DRTFLOW    =>NULL()
        FMPOUT     =>NULL()
        MNW2NAM    =>NULL()
        MNW2LOC    =>NULL()
        MAXAUX     =>NULL()
        FWLAUXORDER=>NULL()
        AUXV       =>NULL()
        SRDACT     =>NULL()
        SRRACT     =>NULL()
ccrth
        PSIRAMPF   =>NULL()
        SATTHK     =>NULL()
        IUNITRAMPF =>NULL()
        QXTF       =>NULL()
        QSAVE      =>NULL()
ccrth
        NPFWL      =>NULL()
        MXPFW      =>NULL()
        IBLOCK     =>NULL()
        MXACTFW    =>NULL()
        NFARMS     =>NULL()
        NSOILS     =>NULL()
        NCROPS     =>NULL()
        IRTFL      =>NULL()
        ICUFL      =>NULL()
        IPFL       =>NULL()
        IFTEFL     =>NULL()
        IIESWFL    =>NULL()
        IEFFL      =>NULL()
        IEBFL      =>NULL()
        IROTFL     =>NULL()
        IDEFFL     =>NULL()
        IBEN       =>NULL()
        ICOST      =>NULL()
        ICCFL      =>NULL()
        INRDFL     =>NULL()
        MXNRDT     =>NULL()
        ISRDFL     =>NULL()
        IRDFL      =>NULL()
        ISRRFL     =>NULL()
        IRRFL      =>NULL()
        IALLOTSW   =>NULL()
        IALLOTGW   =>NULL()
        IFWLCB     =>NULL()
        IFNRCB     =>NULL()
        ISDPFL     =>NULL()
        IOPFL      =>NULL()
        IPAPFL     =>NULL()
        IFBPFL     =>NULL()
        IPFWEL     =>NULL()
        IWELLFLD   =>NULL()
        QBD        =>NULL()
        MCLOSE     =>NULL()
        IRTPFL     =>NULL()
        MXFWEL     =>NULL()
        NFWELS     =>NULL()
        NFWLVL     =>NULL()
        IFWLAL     =>NULL()
        IFWLPB     =>NULL()
        NNPFWL     =>NULL()
        LENSIM     =>NULL()
        NAUX       =>NULL()
        ISTARTFL   =>NULL()
        PCLOSE     =>NULL()
        ALLOTSW    =>NULL()
        ALLOTGW    =>NULL()
        QCLOSE     =>NULL()
        HPCT       =>NULL()
        RPCT       =>NULL()
        FWLAUX     =>NULL()
        NWPERF     =>NULL()
        KNTR       =>NULL()
        NFSEG      =>NULL()
        IRDRFL     =>NULL()
        IFA        =>NULL()
        ISA        =>NULL()
        ICA        =>NULL()
        IVAR       =>NULL()
        QAVF       =>NULL()
        QDEF       =>NULL()
        QEXC       =>NULL()
        HLIFT      =>NULL()
        ELHL       =>NULL()
        SFRADD     =>NULL()
        FDSEGL     =>NULL()
        FCSEGL     =>NULL()
        RDR        =>NULL()
        DIVADD     =>NULL()
        DIVTMP     =>NULL()
        QMAXF      =>NULL()
        QREQ       =>NULL()
        QREQOLD    =>NULL()
        TFDR       =>NULL()
        TFDROLD    =>NULL()
        FLOWINMIN  =>NULL()
        QSTRMIN    =>NULL()
        FALLOT     =>NULL()
        IFID       =>NULL()
        LFID       =>NULL()
        IFIDOLD    =>NULL()
        ICID       =>NULL()
        ISID       =>NULL()
        IFALLOW    =>NULL()
        IFDRID     =>NULL()
        IFCRID     =>NULL()
        ISRD       =>NULL()
        ISRR       =>NULL()
        FWELL      =>NULL()
        GSURF      =>NULL()
        CU         =>NULL()
        CU2D       =>NULL()
        ETR        =>NULL()
        ROOT       =>NULL()
        RT2D       =>NULL()
        PFLX       =>NULL()
        PFLR       =>NULL()
        TPPOT      =>NULL()
        EPPOT      =>NULL()
        EGW        =>NULL()
        TGW        =>NULL()
        DWE        =>NULL()
        ETC        =>NULL()
        RTD        =>NULL()
        DNR        =>NULL()
        ELNR       =>NULL()
        EFF        =>NULL()
        EF2D       =>NULL()
        FIESW      =>NULL()
        RISERUN    =>NULL()
        FTE        =>NULL()
        TDR        =>NULL()
        SOIL       =>NULL()
        PSI        =>NULL()
        TGWO       =>NULL()
        TGWA       =>NULL()
        EGWA       =>NULL()
        TTOT       =>NULL()
        ETOT       =>NULL()
        DPERC      =>NULL()
        FNRCH      =>NULL()
        SWRUN      =>NULL()
        CROPBEN    =>NULL()
        WATERCOST  =>NULL()
        REDPCT     =>NULL()
        GWREDPCT   =>NULL()
        SWREDPCT   =>NULL()
        NRREDPCT   =>NULL()
        CROPLIST   =>NULL()
        CLIMATE    =>NULL()
        UNRD       =>NULL()
        NRD        =>NULL()
        WRC        =>NULL()
        VFB        =>NULL()
        OPT        =>NULL()
        SOIL2D     =>NULL()
        RNRD       =>NULL()
        IFRMFL     =>NULL()
      END IF
C
      RETURN
      END SUBROUTINE
C
      END MODULE FMPMODULE
C
C
      MODULE FMPBLK
C-----VERSION 2 09/18/2009 FMPBLK
C     ******************************************************************
C     DECLARE SHARED PARAMETERS;
C     ******************************************************************
C     ACCURACY: EXPONENT = NUMBER OF SIGNIFICANT DIGITS BEHIND DECIMAL POINT
C    (E.G., 10 FOR 1D+10; ONLY NEEDED TO CUT OFF RANDOM REST ADDED 
C     TO DOUBLE PRECISION VARIABLES THAT WERE CONVERTED FROM REAL(4) -
C     BUT IRRELEVANT IF DEFAULT REAL KIND WAS SET TO 8 AS COMPILER OPTION)
        DOUBLE PRECISION,PARAMETER :: AC=1D+10 !AC & AR MUST BE THE SAME
        REAL, PARAMETER ::            AR=1E+10
C     FLOW RATE PRECISION (DEPENDING ON LENUNI AND ITMUNI)       
        DOUBLE PRECISION,PARAMETER :: FPS=1D-10
ccrth        DOUBLE PRECISION,PARAMETER :: FPS=1D-5
C     PRECISION IN ANALYTICAL SOLUTION (ALWAYS IN CENTIMETERS)
        DOUBLE PRECISION,PARAMETER :: EPS=1D-5
ccrth        DOUBLE PRECISION,PARAMETER :: EPS=1D-0
C     TIME PRECISION BEYOND WHICH TIME IS PRINTED AS PG-FORMAT        
        REAL,PARAMETER :: TPL=1D-10 !LOWER
        REAL,PARAMETER :: TPU=1D+07 !UPPER
C     OPTIMIZATION PRECISION IN SIMPLEX ROUTINE
        DOUBLE PRECISION,PARAMETER :: OPS=1D-10
C     OTHER
        DOUBLE PRECISION,PARAMETER :: ZERO=0.D0
        REAL, PARAMETER ::            ZER=0.
C=======================================================================
      END MODULE FMPBLK
C
C
      SUBROUTINE U2DDP(A,ANAME,II,JJ,K,IN,IOUT)
C-----VERSION 2 09/21/09 U2DDP (U2DREL MODIFIED BY WSCHMID)
C     ******************************************************************
C     ROUTINE TO INPUT 2-D DOUBLE PRECISION DATA MATRICES
C       A IS ARRAY TO INPUT
C       ANAME IS 24 CHARACTER DESCRIPTION OF A
C       II IS NO. OF ROWS
C       JJ IS NO. OF COLS
C       K IS LAYER NO. (USED WITH NAME TO TITLE PRINTOUT --)
C              IF K=0, NO LAYER IS PRINTED
C              IF K<0, CROSS SECTION IS PRINTED)
C       IN IS INPUT UNIT
C       IOUT IS OUTPUT UNIT
C     ******************************************************************
C        SPECIFICATIONS:
C     ------------------------------------------------------------------
      USE GLOBAL, ONLY:LSTCHK
      USE UTIL_MODULE, ONLY:FILE_IO_ERROR
      IMPLICIT NONE
C     ------------------------------------------------------------------
C        ARGUMENTS:
C     ------------------------------------------------------------------
      CHARACTER*24 ANAME
      INTEGER II,JJ,K,IN,IOUT
      DOUBLE PRECISION A(JJ,II)
C     ------------------------------------------------------------------      
C        LOCAL VARIABLES:
C     ------------------------------------------------------------------
      CHARACTER*20 FMTIN
      CHARACTER*200 CNTRL
      CHARACTER*16 TEXT
      CHARACTER*700 FNAME
      DATA NUNOPN/99/
      INTEGER NUNOPN,I,ICLOSE,IFREE,ICOL,ISTART,ISTOP,N,LOCAT,IPRN,J,
     1 KSTP,KPER,NCOL,NROW,ILAY,IERR
      REAL R,PERTIM,TOTIM
      DOUBLE PRECISION CNSTNT,ZERO
C     ------------------------------------------------------------------      
      INCLUDE 'openspec.inc'
C     ------------------------------------------------------------------

C
C1------READ ARRAY CONTROL RECORD AS CHARACTER DATA.
      READ(IN,'(A)') CNTRL
C
C2------LOOK FOR ALPHABETIC WORD THAT INDICATES THAT THE RECORD IS FREE
C2------FORMAT.  SET A FLAG SPECIFYING IF FREE FORMAT OR FIXED FORMAT.
      ICLOSE=0
      IFREE=1
      ICOL=1
      CALL URWORD(CNTRL,ICOL,ISTART,ISTOP,1,N,R,IOUT,IN)
      IF (CNTRL(ISTART:ISTOP).EQ.'CONSTANT') THEN
         LOCAT=0
      ELSE IF(CNTRL(ISTART:ISTOP).EQ.'INTERNAL') THEN
         LOCAT=IN
      ELSE IF(CNTRL(ISTART:ISTOP).EQ.'EXTERNAL') THEN
         CALL URWORD(CNTRL,ICOL,ISTART,ISTOP,2,LOCAT,R,IOUT,IN)
      ELSE IF(CNTRL(ISTART:ISTOP).EQ.'OPEN/CLOSE') THEN
         CALL URWORD(CNTRL,ICOL,ISTART,ISTOP,0,N,R,IOUT,IN)
         FNAME=CNTRL(ISTART:ISTOP)
         LOCAT=NUNOPN
         IF(LSTCHK(3)) THEN
           WRITE(IOUT,15) LOCAT,FNAME
         ENDIF
   15    FORMAT(1X,/1X,'OPENING FILE ON UNIT ',I4,':',/1X,A)
         ICLOSE=1
      ELSE
C
C2A-----DID NOT FIND A RECOGNIZED WORD, SO NOT USING FREE FORMAT.
C2A-----READ THE CONTROL RECORD THE ORIGINAL WAY.
         IFREE=0
         READ(CNTRL,1,ERR=500) LOCAT,CNSTNT,FMTIN,IPRN
    1    FORMAT(I10,F10.0,A20,I10)
      END IF
C
C3------FOR FREE FORMAT CONTROL RECORD, READ REMAINING FIELDS.
      IF(IFREE.NE.0) THEN
         CALL URWORDDP(CNTRL,ICOL,ISTART,ISTOP,4,N,R,CNSTNT,IOUT,IN)
         IF(LOCAT.NE.0) THEN
            CALL URWORD(CNTRL,ICOL,ISTART,ISTOP,1,N,R,IOUT,IN)
            FMTIN=CNTRL(ISTART:ISTOP)
            IF(ICLOSE.NE.0) THEN
               IF(FMTIN.EQ.'(BINARY)') THEN
                  OPEN(UNIT=LOCAT,FILE=FNAME,FORM=FORM,ACCESS=ACCESS,
     &                 ACTION=ACTION(1),IOSTAT=IERR)
               ELSE
               OPEN(UNIT=LOCAT,FILE=FNAME,ACTION=ACTION(1),IOSTAT=IERR)
               END IF
         IF(IERR.NE.0) 
     +         CALL FILE_IO_ERROR(IERR,FNAME=FNAME,LINE=CNTRL,
     +                            INFILE=IN,OUTPUT=IOUT)
            END IF
            IF(LOCAT.GT.0 .AND. FMTIN.EQ.'(BINARY)') LOCAT=-LOCAT
            CALL URWORD(CNTRL,ICOL,ISTART,ISTOP,2,IPRN,R,IOUT,IN)
         END IF
      END IF
C
C4------TEST LOCAT TO SEE HOW TO DEFINE ARRAY VALUES.
      IF(LOCAT.EQ.0) THEN
C
C4A-----LOCAT=0; SET ALL ARRAY VALUES EQUAL TO CNSTNT. RETURN.
        DO I=1,II
        DO J=1,JJ
           A(J,I)=CNSTNT
        ENDDO
        ENDDO
        IF(LSTCHK(3)) THEN
          IF(K.GT.0) WRITE(IOUT,2) ANAME,CNSTNT,K
        ENDIF
    2   FORMAT(1X,/1X,A,' =',1P,G14.6,' FOR LAYER',I4)
        IF(LSTCHK(3)) THEN
          IF(K.LE.0) WRITE(IOUT,3) ANAME,CNSTNT
        ENDIF
    3   FORMAT(1X,/1X,A,' =',1P,G14.6)
        RETURN
      ELSE IF(LOCAT.GT.0) THEN
C
C4B-----LOCAT>0; READ FORMATTED RECORDS USING FORMAT FMTIN.
        IF(K.GT.0) THEN
           IF(LSTCHK(3)) THEN
             WRITE(IOUT,94) ANAME,K,LOCAT,FMTIN
           ENDIF
   94      FORMAT(1X,///11X,A,' FOR LAYER',I4,/
     1      1X,'READING ON UNIT ',I4,' WITH FORMAT: ',A)
        ELSE IF(K.EQ.0) THEN
           IF(LSTCHK(3)) THEN
             WRITE(IOUT,95) ANAME,LOCAT,FMTIN
           ENDIF
   95      FORMAT(1X,///11X,A,/
     1      1X,'READING ON UNIT ',I4,' WITH FORMAT: ',A)
        ELSE
           IF(LSTCHK(3)) THEN
             WRITE(IOUT,96) ANAME,LOCAT,FMTIN
           ENDIF
   96      FORMAT(1X,///11X,A,' FOR CROSS SECTION',/
     1      1X,'READING ON UNIT ',I4,' WITH FORMAT: ',A)
        END IF
        DO I=1,II
        IF(FMTIN.EQ.'(FREE)') THEN
           READ(LOCAT,*) (A(J,I),J=1,JJ)
        ELSE
           READ(LOCAT,FMTIN) (A(J,I),J=1,JJ)
        END IF
        ENDDO
      ELSE
C
C4C-----LOCAT<0; READ UNFORMATTED ARRAY VALUES.
        LOCAT=-LOCAT
        IF(K.GT.0) THEN
           IF(LSTCHK(3)) THEN
             WRITE(IOUT,201) ANAME,K,LOCAT
           ENDIF
  201      FORMAT(1X,///11X,A,' FOR LAYER',I4,/
     1      1X,'READING BINARY ON UNIT ',I4)
        ELSE IF(K.EQ.0) THEN
           IF(LSTCHK(3)) THEN
             WRITE(IOUT,202) ANAME,LOCAT
           ENDIF
  202      FORMAT(1X,///1X,A,/
     1      1X,'READING BINARY ON UNIT ',I4)
        ELSE
           IF(LSTCHK(3)) THEN
             WRITE(IOUT,203) ANAME,LOCAT
           ENDIF
  203      FORMAT(1X,///1X,A,' FOR CROSS SECTION',/
     1      1X,'READING BINARY ON UNIT ',I4)
        END IF
        READ(LOCAT) KSTP,KPER,PERTIM,TOTIM,TEXT,NCOL,NROW,ILAY
        READ(LOCAT) A
      END IF
C
C5------IF CNSTNT NOT ZERO THEN MULTIPLY ARRAY VALUES BY CNSTNT.
      IF(ICLOSE.NE.0) CLOSE(UNIT=LOCAT)
      ZERO=0.D0
      IF(CNSTNT.EQ.ZERO) GO TO 320
      DO I=1,II
      DO J=1,JJ
         A(J,I)=A(J,I)*CNSTNT
      ENDDO
      ENDDO
C
C6------IF PRINT CODE (IPRN) >0 OR =0 THEN PRINT ARRAY VALUES.
  320 IF(IPRN.GE.0) CALL ULAPRW(SNGL(A),ANAME,0,0,JJ,II,0,IPRN,IOUT)
C
C7------RETURN
      RETURN
C
C8------CONTROL RECORD ERROR.
  500 IF(K.GT.0) THEN
         IF(LSTCHK(1)) THEN
           WRITE(IOUT,501) ANAME,K
         ENDIF
  501    FORMAT(1X,/1X,'ERROR READING ARRAY CONTROL RECORD FOR ',A,
     1     ' FOR LAYER',I4,':')
      ELSE
         IF(LSTCHK(1)) THEN
           WRITE(IOUT,502) ANAME
         ENDIF
  502    FORMAT(1X,/1X,'ERROR READING ARRAY CONTROL RECORD FOR ',A,':')
      END IF
      IF(LSTCHK(1)) THEN
        WRITE(IOUT,'(1X,A)') CNTRL
      ENDIF
      CALL USTOP(' ')
C
C9===== END ==============================================================================================      
      END SUBROUTINE
C
C
      SUBROUTINE URWORDDP(LINE,ICOL,ISTART,ISTOP,NCODE,N,R,D,IOUT,IN)
C-----VERSION 2 09/21/09 URWORDDP   (MODIFIED VERSION 21AUG2002 OF URWORD - SEE INSERTIONS BY SCHMID)
C     *************************************************************************************************
C     ROUTINE TO EXTRACT A WORD FROM A LINE OF TEXT, AND OPTIONALLY
C     CONVERT THE WORD TO A NUMBER.
C        ISTART AND ISTOP WILL BE RETURNED WITH THE STARTING AND
C          ENDING CHARACTER POSITIONS OF THE WORD.
C        THE LAST CHARACTER IN THE LINE IS SET TO BLANK SO THAT IF ANY
C          PROBLEMS OCCUR WITH FINDING A WORD, ISTART AND ISTOP WILL
C          POINT TO THIS BLANK CHARACTER.  THUS, A WORD WILL ALWAYS BE
C          RETURNED UNLESS THERE IS A NUMERIC CONVERSION ERROR.  BE SURE
C          THAT THE LAST CHARACTER IN LINE IS NOT AN IMPORTANT CHARACTER
C          BECAUSE IT WILL ALWAYS BE SET TO BLANK.
C        A WORD STARTS WITH THE FIRST CHARACTER THAT IS NOT A SPACE OR
C          COMMA, OR TAB                                                      !INSERTED BY SCHMID
C          AND ENDS WHEN A SUBSEQUENT CHARACTER THAT IS A SPACE
C          OR COMMA, OR TAB.                                                  !INSERTED BY SCHMID
C          NOTE THAT THESE PARSING RULES DO NOT TREAT TWO
C          COMMAS SEPARATED BY ONE OR MORE SPACES AS A NULL WORD.
C        FOR A WORD THAT BEGINS WITH "'", THE WORD STARTS WITH THE
C          CHARACTER AFTER THE QUOTE AND ENDS WITH THE CHARACTER
C          PRECEDING A SUBSEQUENT QUOTE.  THUS, A QUOTED WORD CAN
C          INCLUDE SPACES AND COMMAS.  THE QUOTED WORD CANNOT CONTAIN
C          A QUOTE CHARACTER.
C        IF NCODE IS 0, THE WORD IS UNMODIFIED AND RETURNED.
C        IF NCODE IS 1, THE WORD IS CONVERTED TO UPPER CASE.
C        IF NCODE IS 2, THE WORD IS CONVERTED TO AN INTEGER.
C        IF NCODE IS 3, THE WORD IS CONVERTED TO A REAL NUMBER.
C        IF NCODE IS 4, THE WORD IS CONVERTED TO A DOUBLE PRECISION NUMBER.   !INSERTED BY SCHMID
C        NUMBER CONVERSION ERROR IS WRITTEN TO UNIT IOUT IF IOUT IS
C          POSITIVE; ERROR IS WRITTEN TO DEFAULT OUTPUT IF IOUT IS 0;
C          NO ERROR MESSAGE IS WRITTEN IF IOUT IS NEGATIVE.
C     ******************************************************************
C        SPECIFICATIONS:
C     ------------------------------------------------------------------
      USE GLOBAL, ONLY:LSTCHK
      IMPLICIT NONE
C     ------------------------------------------------------------------
C        ARGUMENTS:
C     ------------------------------------------------------------------
      CHARACTER*(*) LINE
      INTEGER ICOL,ISTART,ISTOP,NCODE,N,IOUT,IN
      REAL R      
      DOUBLE PRECISION D
C     ------------------------------------------------------------------
C        LOCAL VARIABLES:
C     ------------------------------------------------------------------
      CHARACTER*20 RW,STRING
      CHARACTER*1 TAB
      CHARACTER*250 FNAME                                               !seb ADDED FILE NAME TO URWORD 
      INTEGER LINLEN,I,J,IDIFF,K,L
C     ------------------------------------------------------------------
      TAB=CHAR(9)
C
C1------Set last char in LINE to blank and set ISTART and ISTOP to point
C1------to this blank as a default situation when no word is found.  If
C1------starting location in LINE is out of bounds, do not look for a
C1------word.
      FNAME=''
      INQUIRE(IN,NAME=FNAME)
      LINLEN=LEN(LINE)
      LINE(LINLEN:LINLEN)=' '
      ISTART=LINLEN
      ISTOP=LINLEN
      LINLEN=LINLEN-1
      IF(ICOL.LT.1 .OR. ICOL.GT.LINLEN) GO TO 100
C
C2------Find start of word, which is indicated by first character that
C2------is not a blank and not a comma,
C2------and not a tab.                                                  !INSERTED BY SCHMID
      DO 10 I=ICOL,LINLEN
      IF(LINE(I:I).NE.' ' .AND. LINE(I:I).NE.','.and.
     1   line(I:I).ne.TAB) GO TO 20                                    !INSERTED BY SCHMID
10    CONTINUE
      ICOL=LINLEN+1
      GO TO 100
C
C3------Found start of word.  Look for end.
C3A-----When word is quoted, only a quote can terminate it.
20    IF(LINE(I:I).EQ.'''') THEN
         I=I+1
         IF(I.LE.LINLEN) THEN
            DO 25 J=I,LINLEN
            IF(LINE(J:J).EQ.'''') GO TO 40
25          CONTINUE
         END IF
C
C3B-----When word is not quoted, space or comma or tab will terminate.  !Modified BY SCHMID
      ELSE
         DO 30 J=I,LINLEN
         IF(LINE(J:J).EQ.' ' .OR. LINE(J:J).EQ.','.
     1   or.line(J:J).eq.TAB) GO TO 40                                !INSERTED BY SCHMID
30       CONTINUE
      END IF
C
C3C-----End of line without finding end of word; set end of word to
C3C-----end of line.
      J=LINLEN+1
C
C4------Found end of word; set J to point to last character in WORD and
C-------set ICOL to point to location for scanning for another word.
40    ICOL=J+1
      J=J-1
      IF(J.LT.I) GO TO 100
      ISTART=I
      ISTOP=J
C
C4.5------WORD COLLECTED RETURN WITHOUT CONVERTING TO UPPER CASE if NCODE is 0.  seb
      IF(NCODE.EQ.0) THEN
         RETURN
      END IF
C
C5------Convert word to upper case and RETURN if NCODE is 1.
      IF(NCODE.EQ.1) THEN
         IDIFF=ICHAR('a')-ICHAR('A')
         DO 50 K=ISTART,ISTOP
            IF(LINE(K:K).GE.'a' .AND. LINE(K:K).LE.'z')
     1             LINE(K:K)=CHAR(ICHAR(LINE(K:K))-IDIFF)
50       CONTINUE
         RETURN
      END IF
C
C6------Convert word to a number if requested.
100   IF(NCODE.EQ.2 .OR. NCODE.EQ.3 .OR. NCODE.EQ.4) THEN               !MODIFIED BY SCHMID
         RW=' '
         L=20-ISTOP+ISTART
         IF(L.LT.1) GO TO 200
         RW(L:20)=LINE(ISTART:ISTOP)
         IF(NCODE.EQ.2) READ(RW,'(I20)',ERR=200) N
         IF(NCODE.EQ.3) READ(RW,'(F20.0)',ERR=200) R
         IF(NCODE.EQ.4) READ(RW,'(D20.0)',ERR=200) D                    !INSERTED BY SCHMID
         IF(RW.EQ.' ' ) GO TO 200                                       !seb ADDED CHECK FOR WHEN THERE IS A FAILED READ. NOTE SOME COMPILERS TO NOT FLAG A READ OF AN EMPTY LINE AS AN ERROR
      END IF
      RETURN
C
C7------Number conversion error.
200   IF(NCODE.EQ.4) THEN                                               !INSERTED BY SCHMID
         STRING= 'A DP-REAL NUMBER'                                     !INSERTED BY SCHMID
         L=16                                                           !INSERTED BY SCHMID
      ELSEIF(NCODE.EQ.3) THEN                                           !MODIFIED BY SCHMID
         STRING= 'A REAL NUMBER'
         L=13
      ELSE
         STRING= 'AN INTEGER'
         L=10
      END IF
C
C7A-----If output unit is negative, set last character of string to 'E'.
      IF(IOUT.LT.0) THEN
         N=0
         R=0.D0
         LINE(LINLEN+1:LINLEN+1)='E'
         RETURN
C
C7B-----If output unit is positive; write a message to output unit.
      ELSE IF(IOUT.GT.0) THEN
         IF(IN.GT.0) THEN
            IF(LSTCHK(3)) THEN
      WRITE(IOUT,201) IN,TRIM(FNAME),LINE(ISTART:ISTOP),STRING(1:L),LINE
            ENDIF
         ELSE
            IF(LSTCHK(3)) THEN
              WRITE(IOUT,202) LINE(ISTART:ISTOP),STRING(1:L),LINE
            ENDIF
         END IF
201      FORMAT(1X,/1X,'FILE UNIT ',I4,' WITH FILE NAME ',A,
     +    ' : ERROR CONVERTING "',A,                                    !seb ADDED FILE NAME TO ERROR REPORTING
     +       '" TO ',A,' IN LINE:',/1X,A)
202      FORMAT(1X,/1X,'KEYBOARD INPUT : ERROR CONVERTING "',A,
     1       '" TO ',A,' IN LINE:',/1X,A)
C
C7C-----If output unit is 0; write a message to default output.
      ELSE
         IF(IN.GT.0) THEN
            WRITE(*,201) IN,LINE(ISTART:ISTOP),STRING(1:L),LINE
         ELSE
            WRITE(*,202) LINE(ISTART:ISTOP),STRING(1:L),LINE
         END IF
      END IF
C
C7D-----STOP after writing message.
      STOP
C
C8===== END ==============================================================================================
      END SUBROUTINE
      
